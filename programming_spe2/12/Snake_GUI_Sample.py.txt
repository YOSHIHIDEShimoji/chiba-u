import cv2 as cv
import matplotlib.pyplot as plt
import numpy as np

from skimage.filters import gaussian
from skimage.segmentation import active_contour

from scipy.interpolate import interp1d

class Points(): # x, y座標を保存するためのクラス(自分で定義した変数や関数の集合体と思えば良い)
    def __init__(self):  # Points型を定義したときに実行される初期化関数
        self.num = 0
        self.plist = []

    def add(self, x, y):
        self.plist.append([x, y])  # 座標を保存
        self.num += 1  # 座標数を更新
        return True


def onMouse(event, x, y, flag, params):  # マウスの動作関する関数
    wname, img, points = params

    if event == cv.EVENT_MOUSEMOVE:  # マウスを移動させたときの動作定義
        img2 = np.copy(img)
        h, w = img2.shape[0], img2.shape[1]
        cv.line(img2, (x, 0), (x, h - 1), (255))  # どこを指しているかわかるように
        cv.line(img2, (0, y), (w - 1, y), (255))  # 十字線を表示
        cv.imshow(wname, img2)
    if event == cv.EVENT_LBUTTONDOWN:  # 左クリックしたときの動作定義
        points.add(x, y)
        cv.circle(img, (x, y), 3, (0, 0, 255), 3)  # 選択した点に丸を表示
        N = points.num
        if N > 1:  # 2点以上選択された場合，直線でつなぐ
            cv.line(img, (points.plist[N - 2][0], points.plist[N - 2][1]),
                    (points.plist[N - 1][0], points.plist[N - 1][1]), (255), 2, cv.LINE_AA)
        cv.imshow(wname, img)


if __name__ == '__main__':
    GrayImg = cv.imread('DotsImg.png', cv.IMREAD_GRAYSCALE)
    wname = 'MouseEvent'
    cv.namedWindow(wname)
    npoints = 0
    ptlist = Points()
    ImgD = GrayImg.copy()
    ## 画像を見ながら初期輪郭を決定する
    cv.setMouseCallback(wname, onMouse, [wname, ImgD, ptlist])
    cv.imshow(wname, GrayImg)
    cv.waitKey()
    cv.destroyAllWindows()
    # 始点と終点を繋ぐ
    ptlist.add(ptlist.plist[0][0], ptlist.plist[0][1])

    ## 選択した点の間を補間により挿入
    d = np.array(list(ptlist.plist)).astype(np.float64)
    dx = d[:, 0]
    dy = d[:, 1]
    n = d.shape[0]
    Idx = np.linspace(0, 1, n)
    fx = interp1d(Idx, dx, kind='cubic')
    fy = interp1d(Idx, dy, kind='cubic')
    nn = 250  # 補間後の総点数，複雑な形状を対象とする場合は増やす
    NewIdx = np.linspace(0, 1, nn)
    NewX = fx(NewIdx)
    NewY = fy(NewIdx)

    # 初期値を入れてSnake法を実行
#    init = np.array([NewX, NewY]).T
    init = np.array([NewY, NewX]).T # skimage version 0.18 以降 xy座標系ではなくrc (row column)座標で指定するように仕様変更された
    snake = active_contour(gaussian(GrayImg, 3),
                           init, boundary_condition='periodic', alpha=0.015, beta=10, gamma=0.001)

    fig, ax = plt.subplots(figsize=(7, 7))
    ax.imshow(GrayImg, 'gray', vmin=0, vmax=255)
#    ax.plot(init[:, 0], init[:, 1], '--r', lw=3)
#    ax.plot(snake[:, 0], snake[:, 1], ':b', lw=3)
    ax.plot(init[:, 1], init[:, 0], '--r', lw=3)
    ax.plot(snake[:, 1], snake[:, 0], ':b', lw=3)
    ax.set_xticks([]), ax.set_yticks([])
    plt.show()